#include <iostream>
#include<bits/stdc++.h>


using namespace std;

typedef pair<int, int> pii; // (node, weight)
typedef vector<vector<pii>> Graph;

void dijkstra(const Graph& graph, int start, int end) {
    int n = graph.size();
    if (start < 0 || start >= n || end < 0 || end >= n) {
        cout << "Invalid start or end node." << endl;
        return;
    }

    vector<int> dist(n, INT_MAX);
    vector<int> prev(n, -1);
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    
    dist[start] = 0;
    pq.push({0, start});
    
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        
        if (u == end) break; // Stop if we reached the end node
        
        for (const auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                prev[v] = u;
                pq.push({dist[v], v});
            }
        }
    }
    
    if (dist[end] == INT_MAX) {
        cout << "There is no path from " << start << " to " << end << "." << endl;
        return;
    }
    
    cout << "The cost of the shortest path from " << start << " to " << end << " is " << dist[end] << "." << endl;
    
    stack<int> path;
    for (int at = end; at != -1; at = prev[at]) {
        path.push(at);
    }
    
    cout << "The path is: ";
    while (!path.empty()) {
        cout << path.top();
        path.pop();
        if (!path.empty()) cout << " -> ";
    }
    cout << endl;
}

int main() {
    // Hardcoded graph data
    int n = 6; // Increase to include the node 10
    Graph graph(n);
    
    graph[0].push_back({1, 10});
    graph[0].push_back({4, 5});
    graph[1].push_back({2, 1});
    graph[1].push_back({4, 2});
    graph[2].push_back({3, 4});
    graph[3].push_back({2, 6});
    graph[3].push_back({0, 7});
    graph[4].push_back({1, 3});
    graph[4].push_back({2, 9});
    graph[4].push_back({3, 2});
    
    int start, end;
    cout << "Enter the start node: ";
    cin >> start;
    cout << "Enter the end node: ";
    cin >> end;
    
    dijkstra(graph, start, end);
    
    return 0;
}
